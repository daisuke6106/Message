<?xml version="1.0" encoding="UTF-8" ?>

<project name="Message" default="all" basedir=".">

  <!--================================================-->
  <!-- 初期化 -->
  <!--================================================-->
  <target name="init">
    <property file="./build.properties"/>
  	<path id="_init.path.id">
  	  <fileset dir="${library.dir}" includes="*.jar"/>
  	</path>
  	<path id="_init.path.id.test">
  	  <fileset dir="${library.dir}" includes="*.jar"/>
  	  <fileset dir="${test.library.dir}" includes="*.jar"/>
  	</path>
  	<pathconvert property="_library.jars" refid="_init.path.id"/>
  	<pathconvert property="_test.library.jars" refid="_init.path.id.test"/>
  	
  </target>
  
  <!--================================================-->
  <!-- コンパイル -->
  <!--================================================-->
  <target name="compile" depends="init">
  	<delete dir="${compile.delete.dir}" />
  	<mkdir dir="${compile.mkdir.dir}" />
    <javac srcdir      = "${compile.javac.srcdir}"
           destdir     = "${compile.javac.destdir}"
           deprecation = "${compile.javac.deprecation}"
           debug       = "${compile.javac.debug}"
           encoding    = "${compile.javac.encoding}"
           classpath   = "${compile.javac.classpath};${_library.jars}"
           includeantruntime="false"/>
  	<copy todir="${compile.copy.todir}">
  	  <fileset dir="${compile.copy.fileset.dir}">
  	  	<include name="${compile.copy.fileset.include.name}"/>
  	    <exclude name="${compile.copy.fileset.exclude.name}"/>
   	  </fileset>
   	</copy>
  </target>
  
  <!--================================================-->
  <!-- テスト用クラスコンパイル -->
  <!--================================================-->
  <target name="test_compile" depends="init">
  	<delete dir="${test_compile.delete.dir}" />
  	<mkdir dir="${test_compile.mkdir.dir}" />
    <javac srcdir      = "${test_compile.javac.srcdir}"
           destdir     = "${test_compile.javac.destdir}"
           deprecation = "${test_compile.javac.deprecation}"
           debug       = "${test_compile.javac.debug}"
           encoding    = "${test_compile.javac.encoding}"
           classpath   = "${test_compile.javac.classpath};${_test.library.jars}"
           includeantruntime="false"
           />
  	<copy todir="${test_compile.copy.todir}">
  		<fileset dir="${test_compile.copy.fileset.dir}">
  		  <include name="${test_compile.copy.fileset.include.name}"/>
  		  <exclude name="${test_compile.copy.fileset.exclude.name}"/>
  		</fileset>
  	</copy>
  </target>
	  
  <!--================================================-->
  <!-- JARを作成 -->
  <!--================================================-->
  <target name="jar" depends="compile">
  	<delete dir="${jar.delete.dir}" />
  	<jar jarfile  = "${jar.jar.jarfile}"
         basedir  = "${jar.jar.basedir}" />
  </target>
  
  <!--================================================-->
  <!-- テスト用JARを作成 -->
  <!--================================================-->
  <target name="test_jar" depends="test_compile">
  	<delete dir="${test_jar.delete.dir}" />
  	<jar jarfile  = "${test_jar.jar.jarfile}"
         basedir  = "${test_jar.jar.basedir}" />
  </target>
  
  <!--================================================-->
  <!-- javadocを生成 -->
  <!--================================================-->
  <target name="doc" depends="init">
  	<delete dir="${doc.delete.dir}"/>
    <mkdir  dir="${doc.mkdir.dir}" />
    <javadoc locale       = "${doc.jacadoc.locale}"
             charset      = "${doc.jacadoc.charset}"
             encoding     = "${doc.jacadoc.encoding}"
             docencoding  = "${doc.jacadoc.docencoding}"
             classpath    = "${doc.jacadoc.classpath}/*.jar"
             sourcepath   = "${doc.jacadoc.sourcepath}"
             packagenames = "${doc.jacadoc.packagenames}"
             destdir      = "${doc.jacadoc.destdir}">
    </javadoc>
  </target>

  <!--================================================-->
  <!-- テストを実行 -->
  <!--================================================-->
  <target name="test_execute" depends="init">
  	<junit fork="${test_execute.junit.fork}" haltonfailure="${test_execute.junit.haltonfailure}">
	    <test name="jp.co.dk.message.test.TestCaseMessage" />
        <formatter type="plain" usefile="false" />
	  	<classpath>
	  	  <pathelement location="${_test.library.jars}" />
	  	  <pathelement location="${test_execute.junit.classpath.pathelement.location.test_jar}" />
	  	  <pathelement location="${test_execute.junit.classpath.pathelement.location.jar}" />
        </classpath>
	  </junit>
  </target>
  
  <!--================================================-->
  <!-- FindBugs実行 -->
  <!--================================================-->
  <target name="findbugs.execute" depends="init">
  	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${_library.jars}"/>
  	<findbugs home="${_test.library.jars}" output="xml" outputFile="bcel-fb.xml">
  		<auxClassPath path="${_test.library.jars}"/>
  		<sourcePath path="scr"/>
  		<class location="./message.jar"/>
  		<class location="${_test.library.jars}"/>
  	</findbugs>
  </target>
  
  <!--================================================-->
  <!-- カバレッジ出力 -->
  <!--================================================-->
  <target name="coverege.execute">
    
  </target>
  
  <!--================================================-->
  <!-- ビルド用フォルダを削除 -->
  <!--================================================-->
  <target name="clean" depends="init">
    <delete dir="${clean.delete.dir}" />
  </target>
  
  <!--================================================-->
  <!-- 全ジョブ実行 -->
  <!--================================================-->
  <target name="all">
    <antcall target="jar"/>
  	<antcall target="test_jar"/>
  	<antcall target="doc"/>
  	<antcall target="test_execute"/>
  </target>
</project>
